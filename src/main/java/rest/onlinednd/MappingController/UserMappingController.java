package rest.onlinednd.MappingController;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import rest.onlinednd.Entities.Charactersheet.Charactersheet;
import rest.onlinednd.Entities.Group;
import rest.onlinednd.Entities.User;
import rest.onlinednd.Repositories.Charactersheet.CharactersheetRepository;
import rest.onlinednd.Repositories.GroupRepository;
import rest.onlinednd.Repositories.UserRepository;
import rest.onlinednd.ViewModels.UserViewModel;

import java.util.Collections;
import java.util.Optional;
import java.util.Set;

@RestController
@RequestMapping("/api/v1.0/User")
public class UserMappingController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private CharactersheetRepository charactersheetRepository;
    @Autowired
    private GroupRepository groupRepository;


    @GetMapping("/{id}")
    public @ResponseBody
    Optional<User> getUser(@PathVariable int id) {
        return userRepository.findById(id);
    }

/*
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the useCharactersheetsrRepository.findAll();
    }

 */

//CHARACTERSHEET USER GETS (GRUPPENUNABHÄNGIG)____________________________________________
    @CrossOrigin
    @GetMapping("/{userid}/Charactersheets/all")
    public @ResponseBody
    Set<Charactersheet> getAllCharactersheets(@PathVariable int userid) {
        if (userid != 0)
            return charactersheetRepository.findAllCharactersheets(userid);
        else
            return null;
    }

//GET ALL GROUPS FROM USER____________________________________________
    @GetMapping("/{userid}/ViewGroups")
    public @ResponseBody
    Set<Group> getAllGroupsFromUser(@PathVariable int userid ) {
        if(userid != 0)
            return groupRepository.findGroupByUserID(userid);
        else
            return null;
    }



    @GetMapping("/{userid}/Charactersheets/{characterid}")
    public @ResponseBody
    Charactersheet getAllCharactersheets(@PathVariable int userid, @PathVariable int characterid) {
        if (userid != 0 && characterid != 0)
            return charactersheetRepository.findCharactersheetByID(characterid);
        else
            return null;
    }

//________________________________________________________________________________________

    //TODO:
    // CREATE USER
    // DELETE USER
    // MANAGE USER

    @PostMapping(
            path = "/register",
            consumes = {MediaType.APPLICATION_JSON_VALUE}
    )
    //@ResponseStatus(HttpStatus.OK)
    @CrossOrigin
    public @ResponseBody
    User postUser(@RequestBody User user) {
        try {
            if (user == null)
                throw new Exception();

            userRepository.save(user);
            return user;

        } catch (Exception e) {
            return null;
        }

    }


    @PostMapping(
            path = "/login",
            consumes = {MediaType.APPLICATION_JSON_VALUE}
    )
    @CrossOrigin
    public @ResponseBody
    User loginUser(@RequestBody UserViewModel userViewModel) {

            String name =  userViewModel.getUsername();
            User u = userRepository.findUserByName(name);
            if (u==null) return null;
            if (!u.getPassword().equals(userViewModel.getPassword())) return null;
            return u;
    }
//
//    @PutMapping(
//            path = "/{id}",
//            consumes = {MediaType.APPLICATION_JSON_VALUE}
//    )
//    @ResponseStatus(HttpStatus.OK)
//    public String updateUserEmail(@PathVariable int id) {
//
//        return "Account Email wurde geändert.";
//    }
//
//    @PutMapping(
//            path = "/{id}",
//            consumes = {MediaType.APPLICATION_JSON_VALUE}
//    )
//    @ResponseStatus(HttpStatus.OK)
//    public String updateUserPassword(@PathVariable int id) {
//
//        return "Account Passwort wurde geändert.";
//    }
//
//    @DeleteMapping(
//            path = ("/{userid}")
//    )
//    public @ResponseBody String deleteUser(@PathVariable int userid) {
//        userRepository.delete(userRepository.findUserByID(userid));
//        return "Account wurde gelöscht";
//    }
}